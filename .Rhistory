##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drought_clean <- drought |>
# select cols of interest & update names as needed ----
select(date = valid_start, state_abb, drought_lvl, area_pct) |>
# add year, month & day cols using {lubridate} fxns ----
mutate(year = year(date),
month = month(date, label = TRUE, abbr = TRUE),
day = day(date)) |>
# add drought level conditions names ----
mutate(drought_lvl_long = factor(drought_lvl,
levels = c("D4", "D3", "D2", "D1","D0", "None"),
labels = c("(D4) Exceptional", "(D3) Extreme",
"(D2) Severe", "(D1) Moderate", "(D0) Abnormally Dry",
"No Drought"))) |>
# reorder cols ----
select(date, year, month, day, state_abb, drought_lvl, drought_lvl_long, area_pct)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##       create stacked area plot of CA drought conditions through time     ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drought_clean |>
# remove drought_lvl "None" & filter for just CA ----
filter(drought_lvl != "None",
state_abb == "CA") |>
# create ggplot ----
ggplot(mapping = aes(x = date, y = area_pct, fill = drought_lvl_long)) +
# reverse order of groups so level D4 is closest to x-axis ----
geom_area(position = position_stack(reverse = TRUE)) +
# update colors to match US Drought Monitor (colors selected using ColorPick Eyedropper from original USDM data viz) ----
scale_fill_manual(values = c("#853904", "#FF0000", "#FFC100", "#FFD965", "#FFFF00")) +
# set x-axis breaks & remove padding between data and x-axis ----
scale_x_date(breaks = scales::breaks_pretty(n = 10),
expand = c(0, 0)) +
# set y-axis breaks & convert values to percentages & & remove padding between data and y-axis----
scale_y_continuous(breaks = seq(0, 100, by = 10),
labels = scales::label_percent(scale = 1),
expand = c(0, 0)) +
# add title ----
labs(title = "Drought area in California")
install.packages("ggalt") # extra coordinate systems, geoms, statistical transformations, scales and fonts for 'ggplot2' (includes `geom_lollipop()`)
install.packages("ggExtra") # {ggplot2} extension2222 which can be used to add marginal histograms/boxplots/density plots to ggplot2 scatterplots
install.packages("ggdensity") # {ggplot2} extension providing more interpretable visualizations of density estimates based on highest density regions (HDRs)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#.........................load libraries.........................
library(tidycensus)
library(tidyverse)
library(janitor)
library(gghighlight)
library(here)
#.........................source API key.........................
source(here::here("week-3", "KEYS.R"))
census_api_key(censusKEY)
#..........................import data...........................
lyme <- read_csv(here::here("week-3", "data", "LD-Case-Counts-by-County-01-20.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          wrangle lyme disease data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#............wide to long (plus some other wrangling)............
lyme_clean <- lyme |>
# make col names snake_case ----
janitor::clean_names() |>
# rename columns ----
rename(city = ctyname, state = stname, status = ststatus) |>
# wide to long (tidy) years
pivot_longer(cols = 6:25, names_to = "city_year", values_to = "reported_cases") |>
# remove "cases" from the year & coerce year from chr to factor ----
mutate(year = str_remove(city_year, pattern = "cases"),
year = as.factor(year)) |>
# select necessary cols ----
select(year, city, state, status, reported_cases)
#................calculate total cases per state.................
lyme_by_state <- lyme_clean |>
group_by(year, state) |>
summarize(total_cases = sum(reported_cases))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                      request / wrangle population data                   ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#...................get pop estimates by state...................
us_state_pop <- get_estimates(geography = "state",
product = "population",
state = NULL,
year = 2019) |>
filter(variable == "POP") |>
select(state = NAME, population = value)
#........................write data to csv.......................
# optional, but recommended in case you want to work offline, the API is down, etc. (you can then read in your saved data file rather than run the above code)
# write_csv(us_state_pop, file = here::here("week3", "data", "us_state_pop.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            join lyme & pop dfs                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lyme_pop <- left_join(lyme_by_state, us_state_pop) |>
# add col with num of 100k people per state ----
mutate(pop100k = population/100000) |>
# calculate num cases per 100k people (common way of reporting disease incidence) ----
mutate(cases_per100k = total_cases/pop100k)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k)) +
geom_line()
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line()
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
# highlight 1 group
plot1 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
# highlight based on a conditional
plot2 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
# highlight 1 group
plot1 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
# highlight based on a conditional
plot2 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
library(tidyverse)
library(chron)
library(naniar)
library(dplyr)
mko <- read.csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")
mko_clean <- mko |>
# keep only necessary columns ----
select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |>
# create datetime column (not totally necessary for our plots, but it can helpful to know how to do this!) ----
unite(date, year, month, day, sep = "-", remove = FALSE) |>
mutate(time = chron::times(decimal_time)) |>
unite(date_time, date, time, sep = " ") |>
# coerce data types ----
mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"), # see <https://www.neonscience.org/resources/learning-hub/tutorials/dc-convert-date-time-posix-r> for overview of POSIXct vs POSIXlt
year = as.factor(year),
month = as.factor(month),
day = as.numeric(day)) |>
# add month name by indexing the built-in `month.name` vector ----
mutate(month_name = as.factor(month.name[month])) |>
# replace 9999s with NAs ----
naniar::replace_with_na(replace = list(Temp_bot = 9999,
Temp_top = 9999,
Temp_mid = 9999)) |>
# select/reorder desired columns ----
select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)
#......................explore missing data......................
# counts and percentage of missing data by year ----
see_NAs <- mko_clean |>
group_by(year) |>
naniar::miss_var_summary() |>
filter(variable == "Temp_bot")
# visualize missing Temp_bot ----
bottom <- mko_clean |> select(Temp_bot)
missing_temps <- naniar::vis_miss(bottom)
mko_clean |>
mutate(month_name = factor(month_name, levels = month.name)) |>
ggplot(aes(x = Temp_bot, fill = month_name)) +
geom_histogram(position = "identity", alpha = 0.5)
mko_clean |>
mutate(month_name = factor(month_name, levels = month.name)) |>
ggplot(aes(x = Temp_bot)) +
geom_histogram() +
facet_wrap(~month_name)
mko_clean |>
mutate(month_name = factor(x = month_name, levels = month.name)) |>
ggplot(aes(x = Temp_bot, fill = month_name)) +
geom_density(alpha = 0.5)
mko_clean |>
mutate(month_name = factor(month_name, levels = month.name)) |>
ggplot(aes(x = Temp_bot)) +
geom_density(fill = "gray30") +
facet_wrap(~month_name)
dummy_data <- data.frame(value = c(rnorm(n = 100, mean = 5),
rnorm(n = 200, mean = 10)),
group = rep(c("A", "B"),
times = c(100, 200)))
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
ggridges::geom_density_ridges_gradient() +
scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#.........................load libraries.........................
library(tidycensus)
library(tidyverse)
library(janitor)
library(gghighlight)
library(here)
#.........................source API key.........................
source(here::here("week-3", "KEYS.R"))
census_api_key(censusKEY)
#..........................import data...........................
lyme <- read_csv(here::here("week-3", "data", "LD-Case-Counts-by-County-01-20.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          wrangle lyme disease data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#............wide to long (plus some other wrangling)............
lyme_clean <- lyme |>
# make col names snake_case ----
janitor::clean_names() |>
# rename columns ----
rename(city = ctyname, state = stname, status = ststatus) |>
# wide to long (tidy) years
pivot_longer(cols = 6:25, names_to = "city_year", values_to = "reported_cases") |>
# remove "cases" from the year & coerce year from chr to factor ----
mutate(year = str_remove(city_year, pattern = "cases"),
year = as.factor(year)) |>
# select necessary cols ----
select(year, city, state, status, reported_cases)
#................calculate total cases per state.................
lyme_by_state <- lyme_clean |>
group_by(year, state) |>
summarize(total_cases = sum(reported_cases))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                      request / wrangle population data                   ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#...................get pop estimates by state...................
us_state_pop <- get_estimates(geography = "state",
product = "population",
state = NULL,
year = 2019) |>
filter(variable == "POP") |>
select(state = NAME, population = value)
#........................write data to csv.......................
# optional, but recommended in case you want to work offline, the API is down, etc. (you can then read in your saved data file rather than run the above code)
# write_csv(us_state_pop, file = here::here("week3", "data", "us_state_pop.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            join lyme & pop dfs                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lyme_pop <- left_join(lyme_by_state, us_state_pop) |>
# add col with num of 100k people per state ----
mutate(pop100k = population/100000) |>
# calculate num cases per 100k people (common way of reporting disease incidence) ----
mutate(cases_per100k = total_cases/pop100k)
# highlight 1 group
plot1 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
# highlight based on a conditional
plot2 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
# highlight 1 group
plot1 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
# highlight based on a conditional
plot2 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
# highlight 1 group
plot1 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
# highlight based on a conditional
plot2 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
plot1 = lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(state == "New Jersey")
plot1
View(lyme_pop)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per_100k) > 100)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
geom_line() +
gghighlight::gghighlight(max(cases_per100k) > 100)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per_100k, group = state)) +
geom_line
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line()
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 1))
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 5))
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 25))
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 1)) +
coord_fixed(ratio = 1)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 1)) +
coord_fixed(ratio = 100)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 1)) +
coord_fixed(ratio = 1000)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 1)) +
coord_fixed(ratio = 0.01)
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "Vermont") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_line() +
scale_y_continuous(breaks = seq(0, 190, by = 1)) +
coord_fixed(ratio = .05)
# area chart 1 group
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "New Jersey") %>%
ggplot(aes(x = year, y = state, group = state)) +
geom_area()
# area chart 1 group
lyme_pop %>%
filter(year %in% c(2010:2020)) %>%
filter(state == "New Jersey") %>%
ggplot(aes(x = year, y = cases_per100k, group = state)) +
geom_area()
lyme_pop |>
filter(year %in% c(2010:2020)) |>
filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |>
ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
geom_area()
lyme_pop |>
filter(year %in% c(2010:2020)) |>
filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |>
ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
geom_area(position = "fill") +
scale_y_continuous(labels = scales::label_percent(scale = 100))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#..........................load packages.........................
library(tidyverse)
#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jobs_clean <- jobs |>
# add cols (needed for dumbbell plot) ----
mutate(percent_male = 100 - percent_female, # % of females within each industry was already included
difference_earnings = total_earnings_male - total_earnings_female) |>  # diff in earnings between M & F
# rearrange columns ----
relocate(year, major_category, minor_category, occupation,
total_workers, workers_male, workers_female,
percent_male, percent_female,
total_earnings, total_earnings_male, total_earnings_female, difference_earnings,
wage_percent_of_male) |>
# drop rows with missing earning data ----
drop_na(total_earnings_male, total_earnings_female) |>
# make occupation a factor ----
mutate(occupation = as.factor(occupation)) |>
# ---- this next step is for creating our dumbbell plots ----
# classify jobs by percentage male or female ----
mutate(group_label = case_when(
percent_female >= 75 ~ "Occupations that are 75%+ female",
percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
percent_male >= 75 ~ "Occupations that are 75%+ male"
))
jobs_clean |>
filter(year == 2016) |>
slice_max(order_by = total_earnings, n = 10) |> # keep top 10 jobs with most `total_earnings`
ggplot(aes(x = occupation, y = total_earnings)) +
geom_col()
jobs_clean |>
filter(year == 2016) |>
slice_max(order_by = total_earnings, n = 10) |>
ggplot(aes(x = occupation, y = total_earnings)) +
ggalt::geom_lollipop()
# flipping lollipop chart coords
jobs_clean |>
filter(year == 2016) |>
slice_max(order_by = total_earnings, n = 10) |>
ggplot(aes(x = occupation, y = total_earnings)) +
ggalt::geom_lollipop() +
coord_flip()
# adding direct labels to lollipop chart
jobs_clean |>
filter(year == 2016) |>
slice_max(order_by = total_earnings, n = 10) |>
ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings)) +
ggalt::geom_lollipop() +
geom_text(aes(label = scales::dollar(total_earnings)), hjust = -0.2) +
scale_y_continuous(labels = scales::label_currency(accuracy = 1, scale = 0.001, suffix = "k"),
limits = c(0, 250000)) + # expand axis to make room for values
coord_flip()
# plotting side-by-side instead
jobs_clean |>
filter(year == 2016) |>
slice_max(order_by = total_earnings, n = 10) |>
pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = "group", values_to = "earnings_by_group") |>
mutate(sex = str_remove(group, pattern = "total_earnings_")) |>
ggplot(aes(x = fct_reorder(occupation, earnings_by_group), y = earnings_by_group, fill = sex)) +
geom_col(position = position_dodge()) +
coord_flip()
jobs_clean |>
filter(year == 2016) |>
slice_max(order_by = total_earnings, n = 10) |>
pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = "group", values_to = "earnings_by_group") |>
mutate(sex = str_remove(group, pattern = "total_earnings_")) |>
ggplot(aes(x = fct_reorder(occupation, earnings_by_group), y = earnings_by_group, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_linerange(aes(xmin = occupation, xmax = occupation,
ymin = 0, ymax = earnings_by_group),
position = position_dodge(width = 0.5)) +
coord_flip()
#....guarantee the same random samples each time we run code.....
set.seed(0)
#.........get 10 random jobs that are 75%+ female (2016).........
f75 <- jobs_clean |>
filter(year == 2016, group_label == "Occupations that are 75%+ female") |>
slice_sample(n = 10)
#..........get 10 random jobs that are 75%+ male (2016)..........
m75 <- jobs_clean |>
filter(year == 2016, group_label == "Occupations that are 75%+ male") |>
slice_sample(n = 10)
#........get 10 random jobs that are 45-55%+ female (2016).......
f50 <- jobs_clean |>
filter(year == 2016, group_label == "Occupations that are 45-55% female") |>
slice_sample(n = 10)
#.......combine dfs & relevel factors (for plotting order).......
subset_jobs <- rbind(f75, m75, f50) |>
mutate(group_label = fct_relevel(group_label, "Occupations that are 75%+ female",
"Occupations that are 45-55% female", "Occupations that are 75%+ male"))
# create dumbbell plot
# initialize plot (we'll map our aesthetics locally for each geom, below) ----
ggplot(subset_jobs) +
# create dumbbells ----
geom_segment(aes(x = total_earnings_female, xend = total_earnings_male,
y = fct_reorder(occupation, total_earnings), yend = occupation)) + # reorder occupation by avg_salary here
geom_point(aes(x = total_earnings_male, y = occupation),
color = "#CD93D8", size = 2.5) +
geom_point(aes(x = total_earnings_female, y = occupation),
color = "#6A1E99", size = 2.5) +
# facet wrap by group ----
facet_wrap(~group_label, nrow = 3, scales = "free_y") + # "free_y" plots only the axis labels that exist in each group
# axis breaks & $ labels ----
scale_x_continuous(labels = scales::label_dollar(scale = 0.001, suffix = "k"),
breaks = c(25000, 50000, 75000, 100000, 125000))

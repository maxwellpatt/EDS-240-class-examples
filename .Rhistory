library(tidyverse)
library(tidyr)
# untidy data ----
temp_data_wide <- tribble(
~date, ~station1, ~station2,  ~station3,
"2023-10-01", 30.1, 29.8,  31.2,
"2023-11-01", 28.6, 29.1,  33.4,
"2023-12-01", 29.9, 28.5,  32.3
)
# make tidy ----
temp_data_long <- temp_data_wide |>
pivot_longer(cols = starts_with("station"),
names_to = "station_id",
values_to = "temp_c")
View(temp_data_wide)
View(temp_data_long)
library(here)
ggplot(penguins,
aes(x = bill_length_mm,
y = bill_depth_mm))
library(palmerpenguins)
install.packages(palmerpenguins)
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
ggplot(penguins,
aes(x = bill_length_mm,
y = bill_depth_mm))
ggplot(penguins,
aes(x = bill_length_mm,
y = bill_depth_mm)) +
geom_point()
# mapping color globally
ggplot(na.omit(penguins),
aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
geom_point() +
geom_smooth(method = "lm")
# mapping color locally
ggplot(na.omit(penguins),
aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
geom_point(aes(color = species)) +
geom_smooth()
# mapping color globally
ggplot(na.omit(penguins),
aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
geom_point() +
geom_smooth(method = "lm")
# mapping color locally
ggplot(na.omit(penguins),
aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
geom_point(aes(color = species)) +
geom_smooth()
# mapping color globally
ggplot(na.omit(penguins),
aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
geom_point() +
geom_smooth(method = "lm")
# mapping color locally
ggplot(na.omit(penguins),
aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
geom_point(aes(color = species)) +
geom_smooth(method = "lm")
ggplot(penguins,
aes(x = body_mass_g,
y = flipper_length_mm,
color = body_mass_g)) +
geom_point() +
scale_color_gradient(low = "#132B43", high = "#F7DD4C")
ggplot(penguins,
aes(x = species)) +
geom_bar
ggplot(penguins,
aes(x = species)) +
geom_bar()
penguins_summary <- penguins %>%
count(species)
View(penguins_summary)
ggplot(penguins_summary,
aes(x = species,
y = n)) +
geom_bar(stat = "identity")
ggplot(penguins,
aes(x = species,
y = after_stat(prop))) +
geom_bar()
ggplot(penguins,
aes(x = species)) +
geom_bar() +
coord_polar()
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#..........................load packages.........................
library(tidyverse)
library(janitor)
library(usdata)
install.packages("usdata")
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#..........................load packages.........................
library(tidyverse)
library(janitor)
library(usdata)
#......................import fracking data......................
fracking <- read_csv(here::here("week1", "data", "fracking.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#..........................load packages.........................
library(tidyverse)
library(janitor)
library(usdata)
#......................import fracking data......................
fracking <- read_csv(here::here("week-1", "data", "fracking.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                        clean/wrangle fracking data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fracking_clean <- fracking |>
# clean column names ----
janitor::clean_names() |>
# clean up dates ----
mutate(job_start_date = str_remove(job_start_date, " AM")) |> # remove 'AM' from string
mutate(datetime_start = mdy_hms(job_start_date)) |> # convert from string to date (save to new col)
mutate(year = year(datetime_start)) |> # create 'year' col from date
# select relevant cols ----
select(datetime_start, year, state_name, county_name, well_name, total_base_water_volume) |>
# filter out non-state names ----
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland", "Red River", "Roosevelt", "Rusk", "State", "WARD")) |>
# rename state_name to something shorter for typing out when using case_when (not necessary) ----
rename(sn = state_name) |>
# make all words title case ----
mutate(sn = str_to_title(sn)) |>
# fix misspelled state names ----
mutate(sn = case_when(
sn == "Colordao" ~ "Colorado",
sn == "Loiusiana" ~ "Louisiana",
sn == "Louisianna" ~ "Louisiana",
sn == "Lousiana" ~ "Louisiana",
sn == "New Mexcio" ~ "New Mexico",
sn == "Norh Dakota" ~ "North Dakota",
sn == "Norht Dakota" ~ "North Dakota",
sn == "North  Dakota" ~ "North Dakota",
sn == "North Dakata" ~ "North Dakota",
sn == "North Dakotta" ~ "North Dakota",
sn == "Noth Dakota" ~ "North Dakota",
sn == "Pennslvania" ~ "Pennsylvania",
sn == "Pennsylavania" ~ "Pennsylvania",
sn == "Pennsylvanya" ~ "Pennsylvania",
sn == "Penssylvania" ~ "Pennsylvania",
sn == "Texasa" ~ "Texas",
sn == "Texs" ~ "Texas",
sn == "West Viginia" ~ "West Virginia",
sn == "Wyominng" ~ "Wyoming",
TRUE ~ sn # copy over rest of state names from as-is
)) |>
# remove rows that have a '?' mark ----
filter(!str_detect(string = sn, pattern = "\\?")) |> # `?` is a special chr; escape with `\\` prefix
# make all uppercase (so that we can covert abbreviation to state names) ----
mutate(sn = str_to_upper(sn)) |>
# mutate abbreviations to full state names ----
mutate(sn = ifelse(test = str_length(sn) == 2, # if string in 'sn' col is 2 chrs long
yes = usdata::abbr2state(sn), # replace abbreviation with full state name
no = sn)) |> # if string in 'sn' col is not 2 chrs long, keep state name as-is
# make all words title case again ----
mutate(sn = str_to_title(sn)) |>
# create a column of just state abbreviations ----
mutate(state_abb = usdata::state2abbr(sn)) |>
# rename 'sn' to 'state_name' again for clarity ----
rename(state_name = sn, total_base_water_volume_gal = total_base_water_volume) |>
# move 'state_abb' col after state_name col ----
relocate(state_abb, .after = state_name) |>
# convert 'state_name' & 'state_abb' from string to factor ----
mutate(state_name = as.factor(state_name),
state_abb = as.factor(state_abb)) |>
# remove obs that don't have a measurement for 'total_base_water_volume' (NA) ----
drop_na(total_base_water_volume_gal)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##          some exploratory data viz + a few plot mods for practice        ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fracking_clean |>
filter(state_name %in% c("Texas", "Colorado", "North Dakota")) |>
filter(year == 2015) |>
group_by(state_name) |> # pipe directly into ggplot
ggplot(aes(x = fct_rev(fct_infreq(state_name)), y = total_base_water_volume_gal)) + # need to reverse fct order for coord_flip() (plots lowest freq at top by default)
geom_jitter(width = 0.3, alpha = 0.5, color = "gray15") +
geom_violin(color = "red4", alpha = 0.3) +
scale_y_continuous(labels = scales::label_comma()) +
labs(y = "Total base water volumn (gal)") +
coord_flip() +
theme_minimal() +
theme(
axis.title.y = element_blank()
)
View(fracking)
View(fracking_clean)
fracking_clean <- fracking |>
# clean column names ----
janitor::clean_names() |>
# clean up dates ----
mutate(job_start_date = str_remove(job_start_date, " AM")) |> # remove 'AM' from string
mutate(datetime_start = mdy_hms(job_start_date)) |> # convert from string to date (save to new col)
mutate(year = year(datetime_start)) |> # create 'year' col from date
# select relevant cols ----
select(datetime_start, year, state_name, county_name, well_name, total_base_water_volume) |>
# filter out non-state names ----
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland", "Red River", "Roosevelt", "Rusk", "State", "WARD")) |>
# rename state_name to something shorter for typing out when using case_when (not necessary) ----
rename(sn = state_name) |>
# make all words title case ----
mutate(sn = str_to_title(sn)) |>
# fix misspelled state names ----
mutate(sn = case_when(
sn == "Colordao" ~ "Colorado",
sn == "Loiusiana" ~ "Louisiana",
sn == "Louisianna" ~ "Louisiana",
sn == "Lousiana" ~ "Louisiana",
sn == "New Mexcio" ~ "New Mexico",
sn == "Norh Dakota" ~ "North Dakota",
sn == "Norht Dakota" ~ "North Dakota",
sn == "North  Dakota" ~ "North Dakota",
sn == "North Dakata" ~ "North Dakota",
sn == "North Dakotta" ~ "North Dakota",
sn == "Noth Dakota" ~ "North Dakota",
sn == "Pennslvania" ~ "Pennsylvania",
sn == "Pennsylavania" ~ "Pennsylvania",
sn == "Pennsylvanya" ~ "Pennsylvania",
sn == "Penssylvania" ~ "Pennsylvania",
sn == "Texasa" ~ "Texas",
sn == "Texs" ~ "Texas",
sn == "West Viginia" ~ "West Virginia",
sn == "Wyominng" ~ "Wyoming",
TRUE ~ sn # copy over rest of state names from as-is
)) |>
# remove rows that have a '?' mark ----
filter(!str_detect(string = sn, pattern = "\\?")) |> # `?` is a special chr; escape with `\\` prefix
# make all uppercase (so that we can covert abbreviation to state names) ----
mutate(sn = str_to_upper(sn)) |>
# mutate abbreviations to full state names ----
mutate(sn = ifelse(test = str_length(sn) == 2, # if string in 'sn' col is 2 chrs long
yes = usdata::abbr2state(sn), # replace abbreviation with full state name
no = sn)) |> # if string in 'sn' col is not 2 chrs long, keep state name as-is
# make all words title case again ----
mutate(sn = str_to_title(sn)) |>
# create a column of just state abbreviations ----
mutate(state_abb = usdata::state2abbr(sn)) |>
# rename 'sn' to 'state_name' again for clarity ----
rename(state_name = sn, total_base_water_volume_gal = total_base_water_volume) |>
# move 'state_abb' col after state_name col ----
relocate(state_abb, .after = state_name) |>
# convert 'state_name' & 'state_abb' from string to factor ----
mutate(state_name = as.factor(state_name),
state_abb = as.factor(state_abb)) |>
# remove obs that don't have a measurement for 'total_base_water_volume' (NA) ----
drop_na(total_base_water_volume_gal)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#..........................load packages.........................
library(tidyverse)
library(janitor)
library(usdata)
#......................import fracking data......................
fracking <- read_csv(here::here("week-1", "data", "fracking.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                        clean/wrangle fracking data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fracking_clean <- fracking |>
# clean column names ----
janitor::clean_names() #|>
# clean up dates ----
mutate(job_start_date = str_remove(job_start_date, " AM")) |> # remove 'AM' from string
mutate(datetime_start = mdy_hms(job_start_date)) |> # convert from string to date (save to new col)
mutate(year = year(datetime_start)) |> # create 'year' col from date
# select relevant cols ----
select(datetime_start, year, state_name, county_name, well_name, total_base_water_volume) |>
# filter out non-state names ----
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland", "Red River", "Roosevelt", "Rusk", "State", "WARD")) |>
# rename state_name to something shorter for typing out when using case_when (not necessary) ----
rename(sn = state_name) |>
# make all words title case ----
mutate(sn = str_to_title(sn)) |>
# fix misspelled state names ----
mutate(sn = case_when(
sn == "Colordao" ~ "Colorado",
sn == "Loiusiana" ~ "Louisiana",
sn == "Louisianna" ~ "Louisiana",
sn == "Lousiana" ~ "Louisiana",
sn == "New Mexcio" ~ "New Mexico",
sn == "Norh Dakota" ~ "North Dakota",
sn == "Norht Dakota" ~ "North Dakota",
sn == "North  Dakota" ~ "North Dakota",
sn == "North Dakata" ~ "North Dakota",
sn == "North Dakotta" ~ "North Dakota",
sn == "Noth Dakota" ~ "North Dakota",
sn == "Pennslvania" ~ "Pennsylvania",
sn == "Pennsylavania" ~ "Pennsylvania",
sn == "Pennsylvanya" ~ "Pennsylvania",
sn == "Penssylvania" ~ "Pennsylvania",
sn == "Texasa" ~ "Texas",
sn == "Texs" ~ "Texas",
sn == "West Viginia" ~ "West Virginia",
sn == "Wyominng" ~ "Wyoming",
TRUE ~ sn # copy over rest of state names from as-is
)) |>
# remove rows that have a '?' mark ----
filter(!str_detect(string = sn, pattern = "\\?")) |> # `?` is a special chr; escape with `\\` prefix
# make all uppercase (so that we can covert abbreviation to state names) ----
mutate(sn = str_to_upper(sn)) |>
# mutate abbreviations to full state names ----
mutate(sn = ifelse(test = str_length(sn) == 2, # if string in 'sn' col is 2 chrs long
yes = usdata::abbr2state(sn), # replace abbreviation with full state name
no = sn)) |> # if string in 'sn' col is not 2 chrs long, keep state name as-is
# make all words title case again ----
mutate(sn = str_to_title(sn)) |>
# create a column of just state abbreviations ----
mutate(state_abb = usdata::state2abbr(sn)) |>
# rename 'sn' to 'state_name' again for clarity ----
rename(state_name = sn, total_base_water_volume_gal = total_base_water_volume) |>
# move 'state_abb' col after state_name col ----
relocate(state_abb, .after = state_name) |>
# convert 'state_name' & 'state_abb' from string to factor ----
mutate(state_name = as.factor(state_name),
state_abb = as.factor(state_abb)) |>
# remove obs that don't have a measurement for 'total_base_water_volume' (NA) ----
drop_na(total_base_water_volume_gal)
View(fracking_clean)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#..........................load packages.........................
library(tidyverse)
library(janitor)
library(usdata)
#......................import fracking data......................
fracking <- read_csv(here::here("week-1", "data", "fracking.csv"))
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                        clean/wrangle fracking data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fracking_clean <- fracking |>
# clean column names ----
janitor::clean_names() |>
# clean up dates ----
mutate(job_start_date = str_remove(job_start_date, " AM")) |> # remove 'AM' from string
mutate(datetime_start = mdy_hms(job_start_date)) |> # convert from string to date (save to new col)
mutate(year = year(datetime_start)) |> # create 'year' col from date
# select relevant cols ----
select(datetime_start, year, state_name, county_name, well_name, total_base_water_volume) |>
# filter out non-state names ----
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland", "Red River", "Roosevelt", "Rusk", "State", "WARD")) |>
# rename state_name to something shorter for typing out when using case_when (not necessary) ----
rename(sn = state_name) |>
# make all words title case ----
mutate(sn = str_to_title(sn)) |>
# fix misspelled state names ----
mutate(sn = case_when(
sn == "Colordao" ~ "Colorado",
sn == "Loiusiana" ~ "Louisiana",
sn == "Louisianna" ~ "Louisiana",
sn == "Lousiana" ~ "Louisiana",
sn == "New Mexcio" ~ "New Mexico",
sn == "Norh Dakota" ~ "North Dakota",
sn == "Norht Dakota" ~ "North Dakota",
sn == "North  Dakota" ~ "North Dakota",
sn == "North Dakata" ~ "North Dakota",
sn == "North Dakotta" ~ "North Dakota",
sn == "Noth Dakota" ~ "North Dakota",
sn == "Pennslvania" ~ "Pennsylvania",
sn == "Pennsylavania" ~ "Pennsylvania",
sn == "Pennsylvanya" ~ "Pennsylvania",
sn == "Penssylvania" ~ "Pennsylvania",
sn == "Texasa" ~ "Texas",
sn == "Texs" ~ "Texas",
sn == "West Viginia" ~ "West Virginia",
sn == "Wyominng" ~ "Wyoming",
TRUE ~ sn # copy over rest of state names from as-is
)) |>
# remove rows that have a '?' mark ----
filter(!str_detect(string = sn, pattern = "\\?")) |> # `?` is a special chr; escape with `\\` prefix
# make all uppercase (so that we can covert abbreviation to state names) ----
mutate(sn = str_to_upper(sn)) |>
# mutate abbreviations to full state names ----
mutate(sn = ifelse(test = str_length(sn) == 2, # if string in 'sn' col is 2 chrs long
yes = usdata::abbr2state(sn), # replace abbreviation with full state name
no = sn)) |> # if string in 'sn' col is not 2 chrs long, keep state name as-is
# make all words title case again ----
mutate(sn = str_to_title(sn)) |>
# create a column of just state abbreviations ----
mutate(state_abb = usdata::state2abbr(sn)) |>
# rename 'sn' to 'state_name' again for clarity ----
rename(state_name = sn, total_base_water_volume_gal = total_base_water_volume) |>
# move 'state_abb' col after state_name col ----
relocate(state_abb, .after = state_name) |>
# convert 'state_name' & 'state_abb' from string to factor ----
mutate(state_name = as.factor(state_name),
state_abb = as.factor(state_abb)) |>
# remove obs that don't have a measurement for 'total_base_water_volume' (NA) ----
drop_na(total_base_water_volume_gal)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##          some exploratory data viz + a few plot mods for practice        ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fracking_clean |>
filter(state_name %in% c("Texas", "Colorado", "North Dakota")) |>
filter(year == 2015) |>
group_by(state_name) |> # pipe directly into ggplot
ggplot(aes(x = fct_rev(fct_infreq(state_name)), y = total_base_water_volume_gal)) + # need to reverse fct order for coord_flip() (plots lowest freq at top by default)
geom_jitter(width = 0.3, alpha = 0.5, color = "gray15") +
geom_violin(color = "red4", alpha = 0.3) +
scale_y_continuous(labels = scales::label_comma()) +
labs(y = "Total base water volumn (gal)") +
coord_flip() +
theme_minimal() +
theme(
axis.title.y = element_blank()
)
